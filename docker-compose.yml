services:
  rabbitmq:
    container_name: pfnd-rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/rabbitmq

  ml-evaluation-worker:
    build:
      context: ./ml-evaluation-worker
      dockerfile: Dockerfile
    environment:
      - BROKER_URI=amqp://user:password@rabbitmq:5672/%2F
      - DB_URI=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@evaluation-sources-db:5432/evaluation_sources
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_URL=${OPENAI_API_URL}
      - OPENAI_MODEL_NAME=${OPENAI_MODEL_NAME}
    depends_on:
      - rabbitmq
      - evaluation-sources-db
    volumes:
      - ml_evaluation_worker_data:/ml-evaluation-worker
    deploy:
      replicas: 3

  evaluation-sources-db:
    image: ramsrib/pgvector:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: evaluation_sources
    ports:
      - "5434:5432"
    volumes:
      - evaluation_sources_db_data:/data/db

  nginx:
    image: nginx:stable-alpine
    container_name: pfnd-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf/default.conf:/etc/nginx/nginx.conf:ro
      - webapp_data:/usr/share/nginx/html
      - nginx_logs_data:/var/log/nginx
    depends_on:
      - webapp
      - auth
      - business-logic

  webapp:
    container_name: pfnd-webapp
    expose:
      - "80"
    build:
      context: ./webapp
      dockerfile: Dockerfile
      args:
        REACT_APP_AUTH_API: http://localhost/api/auth
        REACT_APP_LOGIC_API: http://localhost/api/business-logic
    volumes:
      - webapp_data:/usr/share/nginx/html # Output build files to shared volume
    depends_on:
      - business-logic
      - auth
  auth:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      USERS_DB_URL: jdbc:postgresql://userdb:5432/${USERS_DB_NAME}
      LOGSTASH_URL: logstash:5000
      GOOGLE_OAUTH_CLIENT_ID: ${GOOGLE_OAUTH_CLIENT_ID}
      GOOGLE_OAUTH_CLIENT_SECRET: ${GOOGLE_OAUTH_CLIENT_SECRET}
      MAILING_PASSWORD: ${MAILING_PASSWORD}
      JWT_KEY: ${JWT_KEY}
      PROFILE: ${PROFILE:-}
    depends_on:
      - userdb
      - logstash
    volumes:
      - auth_data:/auth

  userdb:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${USERS_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - userdb_data:/var/lib/postgresql/data

  historydb:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${HISTORY_DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - historydb_data:/var/lib/postgresql/data

  business-logic:
    build:
      context: ./BusinessLogicService
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      HISTORY_DB_URL: jdbc:postgresql://historydb:5432/${HISTORY_DB_NAME}
      REDIS_URL: redis://redis:6379
      LOGSTASH_URL: logstash:5000
      BROKER_URI: amqp://user:password@rabbitmq:5672//
      JWT_KEY: ${JWT_KEY}
      PROFILE: ${PROFILE:-}
    depends_on:
      - historydb
      - rabbitmq
      - redis
      - logstash
    volumes:
      - business_logic_data:/business-logic

  

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:9.0.0
    ports:
      - "5005:5000/tcp"
      - "5005:5000/udp"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
  redis:
    image: redis:8.0
    ports:
      - "6379:6379"
    restart: unless-stopped
volumes:
  userdb_data:
  historydb_data:
  evaluation_sources_db_data:
  elasticsearch_data:
  rabbitmq_data:
  ml_evaluation_worker_data:
  auth_data:
  business_logic_data:
  nginx_www_data:
  nginx_logs_data:
  webapp_data: